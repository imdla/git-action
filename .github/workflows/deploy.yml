name: Deploy Service

on:
  push: # 워크플로우 실행 조건 이벤트
    branches: # 워크플로우 실행 조건 브랜치
      - main
jobs:
  ssh-agent: # Job 이름
    runs-on: ubuntu-24.04 # Github 워크스페이스 환경

    steps: # 실행할 작업(step)
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      # 캐시 저장 설정을 위한 actions(라이브러리)
      - name: Cache Docker Image Layer
        # acrions/cache : 깃허브 캐시 저장소 활용을 위한 라이브러리
        uses: actions/cache@v4.2.0
        with:
          path: /tmp/.buildx-cache
          key: docker-image-layer-cache-${{ github.sha }}
          restore-keys: docker-image-layer-cache

      - name: run ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 원격 서버를 신뢰할 수 있는 서버로 등록하는 과정
      # known_hosts : 원격 서버들의 지문이 저장된 파일
      - name: ADD Remote Server Fingerprint to Known Hosts
        run: ssh-keyscan -H -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts || true

      # 1. 환경 변수 파일 생성
      - name: Create .env file
        run: |
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
          echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env

      # 3. 도커 Buildx 엔진 설정 action(라이브러리)
      - name: Set up Docker BuildKit
        # docker/setup-buildx-action
        # 워크스페이스에 BuildKit 엔진을 설치하는 action(라이브러리)
        # build = BuildKit
        uses: docker/setup-buildx-action@v3

      # BuildKit 엔진 빌더(이미지 빌드를 도와주는 도구) 생성
      # 기존 Docker 빌더 : Cache 파일 저장 & 불러오기 경로 제어 불가
      - name: Creat Buildkit 빌더
        run: |
          docker buildx create --use --name buildkit-builder
          docker buildx use buildkit-builder

      # 2. 이미지 빌드
      - name: Docker Image Build
        run: |
          docker compose -f docker-compose-actions-cache.yml build --build-arg BUILDKIT_INLINE_CACHE=1

      # 3. Docker 로그인
      - name: Login DockerHub
        run: echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin

      # 4. 이미지 push
      - name: Docker Image Push
        run: docker compose -f docker-compose-actions-cache.yml push

      # 5. workspace에서 원격 서버로 compose와 .env 복사
      - name: Copy .env / docker-compose-actions-cache.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: 'docker-compose-actions-cache.yml,.env'
          target: '~/work-directory'

      # 6. 이미지 pull & 컨테이너 up
      - name: Pull Image & Up Container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ~/work-directory
            docker compose -f docker-compose-actions-cache.yml pull
            docker compose -f docker-compose-actions-cache.yml down
            docker compose -f docker-compose-actions-cache.yml up -d
            docker image prune -f

      # Discord 알림 - Webhook
      - name: Discord Notificaton - Start
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: '🚀 배포 시작'
          description: |
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.event.head_commit.message }}
          color: 0xBAFF1A

      # Discord 알림 - 배포 성공
      - name: Discord Notificaton - Success
        if: success()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: '✅ 배포 종료 - 성공'
          description: |
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.event.head_commit.message }}
          color: 0xFF9BFD

      # Discord 알림 - 배포 실패
      - name: Discord Notificaton - Failure
        if: failure()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: '❌ 배포 종료 - 실패'
          description: |
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.event.head_commit.message }}
          color: 0xBBBBBB
